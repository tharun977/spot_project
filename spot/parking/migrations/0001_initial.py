# Generated by Django 5.1.5 on 2025-01-24 14:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Log',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('lot_id', models.AutoField(primary_key=True, serialize=False)),
                ('status_before', models.CharField(max_length=50)),
                ('status_after', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingPlace',
            fields=[
                ('place_id', models.AutoField(primary_key=True, serialize=False)),
                ('place_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
                ('capacity', models.IntegerField()),
                ('status', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='VehicleType',
            fields=[
                ('vehicle_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('vehicle_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingDetails',
            fields=[
                ('parking_id', models.AutoField(primary_key=True, serialize=False)),
                ('vehicle_reg_no', models.CharField(max_length=20)),
                ('in_time', models.DateTimeField()),
                ('out_time', models.DateTimeField(blank=True, null=True)),
                ('parking_duration', models.DurationField(blank=True, null=True)),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.parkinglot')),
            ],
        ),
        migrations.AddField(
            model_name='parkinglot',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.parkingplace'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=50)),
                ('full_name', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('parking_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(max_length=50)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(max_length=50)),
                ('parking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.parkingdetails')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.user')),
            ],
        ),
        migrations.AddField(
            model_name='parkingdetails',
            name='occupied_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.user'),
        ),
        migrations.AddField(
            model_name='parkingdetails',
            name='vehicle_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parking.vehicletype'),
        ),
    ]
